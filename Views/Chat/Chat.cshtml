@{
    ViewData["Title"] = "Chat với " + ViewBag.ReceiverName;
    var senderId = ViewBag.SenderId;
    var receiverId = ViewBag.ReceiverId;
    var senderName = ViewBag.SenderName;
    var receiverName = ViewBag.ReceiverName;
}

<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Title"]</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .chat-container {
            width: 90%;
            max-width: 1000px;
            height: 90vh;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .chat-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chat-header-info {
            display: flex;
            align-items: center;
        }

        .back-button {
            background: rgba(255,255,255,0.2);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

            .back-button:hover {
                background: rgba(255,255,255,0.3);
            }

        .receiver-avatar {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            background: white;
            color: #667eea;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            font-weight: bold;
            margin-right: 15px;
        }

        .receiver-info h2 {
            margin: 0;
            font-size: 20px;
        }

        .receiver-status {
            font-size: 14px;
            opacity: 0.9;
        }

        .typing-indicator {
            font-size: 14px;
            font-style: italic;
            opacity: 0.8;
            display: none;
        }

        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background: #f8f9fa;
        }

        .message {
            display: flex;
            margin-bottom: 15px;
            animation: slideIn 0.3s ease;
        }

        @@keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message.sent {
            justify-content: flex-end;
        }

        .message.received {
            justify-content: flex-start;
        }

        .message-content {
            max-width: 60%;
            padding: 12px 16px;
            border-radius: 15px;
            position: relative;
        }

        .message.sent .message-content {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-bottom-right-radius: 5px;
        }

        .message.received .message-content {
            background: white;
            color: #333;
            border-bottom-left-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .message-text {
            word-wrap: break-word;
            margin-bottom: 5px;
        }

        .message-time {
            font-size: 11px;
            opacity: 0.7;
            text-align: right;
        }

        .input-container {
            padding: 20px;
            background: white;
            border-top: 1px solid #e9ecef;
            display: flex;
            gap: 10px;
        }

        #messageInput {
            flex: 1;
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 25px;
            font-size: 15px;
            outline: none;
            transition: border-color 0.3s ease;
        }

            #messageInput:focus {
                border-color: #667eea;
            }

        #sendButton {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 15px;
            font-weight: bold;
            transition: transform 0.2s ease;
        }

            #sendButton:hover {
                transform: scale(1.05);
            }

            #sendButton:active {
                transform: scale(0.95);
            }

        .connection-status {
            font-size: 12px;
            padding: 5px 10px;
            border-radius: 15px;
            background: rgba(255,255,255,0.2);
        }

            .connection-status.connected {
                background: rgba(76, 175, 80, 0.3);
            }

            .connection-status.disconnected {
                background: rgba(244, 67, 54, 0.3);
            }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <div class="chat-header-info">
                <div class="receiver-avatar">@receiverName.Substring(0, 1).ToUpper()</div>
                <div class="receiver-info">
                    <h2>@receiverName</h2>
                    <div class="receiver-status">
                        <span id="typingIndicator" class="typing-indicator">Đang nhập...</span>
                        <span id="onlineStatus">Online</span>
                    </div>
                </div>
            </div>
            <div>
                <span id="connectionStatus" class="connection-status">Đang kết nối...</span>
                <a href="@Url.Action("Index", "Chat")" class="back-button">← Quay lại</a>
            </div>
        </div>

        <div id="messagesContainer" class="messages-container">
            <!-- Messages will be loaded here -->
        </div>

        <div class="input-container">
            <input type="text" id="messageInput" placeholder="Nhập tin nhắn..." />
            <button id="sendButton">Gửi</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        const senderId = @senderId;
        const receiverId = @receiverId;
        const senderName = "@senderName";
        const receiverName = "@receiverName";

        const base = window.location.origin;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl(`${base}/chatHub`)
            .withAutomaticReconnect()
            .build();

        // Keep-alive
        connection.serverTimeoutInMilliseconds = 60000;
        connection.keepAliveIntervalInMilliseconds = 15000;

        // Kết nối
        connection.start()
          .then(async () => {
            console.log("SignalR Connected!");
            setStatus("Đã kết nối", true);

            // ✅ Join vào group hội thoại (1-1)
            await connection.invoke("JoinConversation", senderId, receiverId);

            // Load lịch sử sau khi join
            await loadMessages();
          })
          .catch(err => {
            console.error("SignalR Connection Error: ", err);
            setStatus("Lỗi kết nối", false);
          });

        // Reconnecting/Reconnected
        connection.onreconnecting((err) => {
          console.warn("Reconnecting...", err);
          setStatus("Mất kết nối, đang thử lại...", false);
        });

        connection.onreconnected(async (id) => {
          console.log("Reconnected:", id);
          setStatus("Đã kết nối lại", true);

          // 🔁 ConnectionId mới => phải JoinConversation lại
          try {
            await connection.invoke("JoinConversation", senderId, receiverId);
          } catch {}
        });

        connection.onclose(err => {
          console.warn("Closed", err);
          setStatus("Đã ngắt kết nối", false);
        });

        // Nhận message
        connection.on("ReceiveMessage", (messageData) => {
          displayMessage(messageData);
        });

        // Typing indicator
        connection.on("UserIsTyping", (userId) => {
          if (userId === receiverId) {
            const typingIndicator = document.getElementById("typingIndicator");
            typingIndicator.style.display = "inline";
            document.getElementById("onlineStatus").style.display = "none";
            setTimeout(() => {
              typingIndicator.style.display = "none";
              document.getElementById("onlineStatus").style.display = "inline";
            }, 3000);
          }
        });

        // --- UI helpers ---
        function setStatus(text, ok) {
          const el = document.getElementById("connectionStatus");
          el.textContent = text;
          el.className = "connection-status " + (ok ? "connected" : "disconnected");
        }

        // Load lịch sử
        async function loadMessages() {
          try {
            const res = await fetch(`${base}/Chat/GetMessages?senderId=${senderId}&receiverId=${receiverId}`);
            const messages = await res.json();
            const container = document.getElementById("messagesContainer");
            container.innerHTML = "";
            messages.forEach(displayMessage);
            scrollToBottom();
          } catch (e) {
            console.error("Error loading messages:", e);
          }
        }

        // Render message
        function displayMessage(messageData) {
          const container = document.getElementById("messagesContainer");
          const div = document.createElement("div");
          div.className = (messageData.senderId === senderId) ? "message sent" : "message received";
          div.innerHTML = `
            <div class="message-content">
              <div class="message-text">${escapeHtml(messageData.content)}</div>
              <div class="message-time">${messageData.sentAt}</div>
            </div>`;
          container.appendChild(div);
          scrollToBottom();
        }

        // Gửi tin
        document.getElementById("sendButton").addEventListener("click", sendMessage);
        document.getElementById("messageInput").addEventListener("keypress", (e) => {
          if (e.key === "Enter") {
            e.preventDefault();
            sendMessage();
          }
        });

        async function sendMessage() {
          const input = document.getElementById("messageInput");
          const message = input.value.trim();
          if (!message) return;
          try {
            await connection.invoke("SendMessage", senderId, receiverId, message);
            input.value = "";
            input.focus();
          } catch (e) {
            console.error("Error sending message:", e);
            alert("Không thể gửi tin nhắn. Vui lòng thử lại!");
          }
        }

        // Typing debounce nhẹ
        let typingTimeout;
        document.getElementById("messageInput").addEventListener("input", () => {
          clearTimeout(typingTimeout);
          connection.invoke("UserTyping", senderId, receiverId).catch(()=>{});
          typingTimeout = setTimeout(() => {}, 600);
        });

        function scrollToBottom() {
          const c = document.getElementById("messagesContainer");
          c.scrollTop = c.scrollHeight;
        }

        function escapeHtml(text) {
          const div = document.createElement('div');
          div.textContent = text ?? "";
          return div.innerHTML;
        }
    </script>


</body>
</html>